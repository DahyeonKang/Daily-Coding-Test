# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1veUyGGR84zSycVon78TZ5LdvaNLnPY7D
"""

## 문제 : 사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.


cnt = 0
def DFS(numbers, target, current, idx):
    global cnt

    if idx == len(numbers):
        if current == target:
            cnt += 1
        return
    DFS(numbers, target, current + numbers[idx], idx + 1)
    DFS(numbers, target, current - numbers[idx], idx + 1)

def solution(numbers, target):
    DFS(numbers, target, 0, 0)
    return cnt



# 매개변수 줄인 코드
def solution(numbers, target):
    answer = DFS(numbers, target, 0)
    return answer

def DFS(numbers, target, depth):
    answer = 0
    if depth == len(numbers):
        print(numbers)
        if sum(numbers) == target:
            return 1
        else: return 0
    else:
        answer += DFS(numbers, target, depth+1)
        numbers[depth] *= -1
        answer += DFS(numbers, target, depth+1)
        return answer



# solution 안에 함수 넣은 코드
def solution(numbers, target):
    n = len(numbers)
    answer = 0
    def dfs(idx, result):
        if idx == n:
            if result == target:
                nonlocal answer
                answer += 1
            return
        else:
            dfs(idx+1, result+numbers[idx])
            dfs(idx+1, result-numbers[idx])
    dfs(0,0)
    return answer