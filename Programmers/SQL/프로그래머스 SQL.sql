## SELECT: 평균 일일 대여 요금 구하기
SELECT ROUND(AVG(DAILY_FEE), 0) AS AVERAGE_FEE FROM CAR_RENTAL_COMPANY_CAR
WHERE CAR_TYPE = 'SUV';


## SELECT: 재구매가 일어난 상품과 회원 리스트 구하기
SELECT USER_ID, PRODUCT_ID FROM ONLINE_SALE
GROUP BY USER_ID, PRODUCT_ID
HAVING COUNT(*) > 1
ORDER BY USER_ID ASC, PRODUCT_ID DESC;


## SELECT: 오프라인/온라인 판매 데이터 통합하기
(SELECT date_format(SALES_DATE, '%Y-%m-%d') AS SALES_DATE, PRODUCT_ID, USER_ID, SALES_AMOUNT FROM ONLINE_SALE
where MONTH(SALES_DATE) = 3)
UNION ALL
(SELECT date_format(SALES_DATE, '%Y-%m-%d') AS SALES_DATE, PRODUCT_ID, NULL AS USER_ID, SALES_AMOUNT FROM OFFLINE_SALE
WHERE SALES_DATE  BETWEEN '2022-03-01' AND '2022-03-31')
ORDER BY SALES_DATE ASC, PRODUCT_ID ASC, USER_ID ASC;
# 다른 분 코드
(SELECT DATE_FORMAT(SALES_DATE, "%Y-%m-%d") AS SALES_DATE, PRODUCT_ID, USER_ID, SALES_AMOUNT
FROM ONLINE_SALE AS N
WHERE SALES_DATE LIKE '2022-03%'
UNION
SELECT DATE_FORMAT(SALES_DATE, "%Y-%m-%d") AS SALES_DATE, PRODUCT_ID, NULL AS USER_ID, SALES_AMOUNT
FROM OFFLINE_SALE AS F
WHERE SALES_DATE LIKE '2022-03%')
ORDER BY SALES_DATE, PRODUCT_ID, USER_ID


## SUM, MAX, MIN: 가장 비싼 상품 구하기
SELECT MAX(PRICE) AS MAX_PRICE FROM PRODUCT;


## SUM, MAX, MIN: 최댓값 구하기
SELECT MAX(DATETIME) FROM ANIMAL_INS;


## SUM, MAX, MIN: 동물 수 구하기
SELECT COUNT(*) FROM ANIMAL_INS;


## SUM, MAX, MIN: 가격이 제일 비싼 식품의 정보 출력하기
# 코드1
SELECT * FROM FOOD_PRODUCT 
WHERE PRICE = (SELECT MAX(PRICE) FROM FOOD_PRODUCT);
# 코드2
SELECT PRODUCT_ID,PRODUCT_NAME,PRODUCT_CD,CATEGORY, PRICE FROM FOOD_PRODUCT
ORDER BY PRICE DESC
LIMIT 1;
# SELECT PRODUCT_ID,PRODUCT_NAME,PRODUCT_CD,CATEGORY, MAX(PRICE) AS PRICE FROM FOOD_PRODUCT;
# 위 코드의 경우 price의 최대값과 나머지의 1번째 행이 출력됩니다


## SUM, MAX, MIN: 중복 제거하기
SELECT COUNT(DISTINCT NAME) FROM ANIMAL_INS;


## GROUP BY: 고양이와 개는 몇 마리 있을까
SELECT ANIMAL_TYPE, COUNT(*) AS COUNT FROM ANIMAL_INS
GROUP BY ANIMAL_TYPE
ORDER BY ANIMAL_TYPE;


## GROUP BY: 동명 동물 수 찾기
SELECT NAME, COUNT(NAME) AS COUNT FROM ANIMAL_INS 
WHERE NAME IS NOT NULL
GROUP BY NAME
HAVING COUNT>1
ORDER BY NAME;


## GROUP BY: 즐겨찾기가 가장 많은 식당 정보 출력하기
# 코드1
SELECT r.FOOD_TYPE, r.REST_ID, r.REST_NAME, r.FAVORITES FROM REST_INFO r
INNER JOIN (
    SELECT FOOD_TYPE, MAX(FAVORITES) fav FROM REST_INFO
    GROUP BY FOOD_TYPE
) r2 ON r.FOOD_TYPE = r2.FOOD_TYPE AND r.FAVORITES = r2.fav
ORDER BY FOOD_TYPE DESC;
# 코드2
SELECT FOOD_TYPE, REST_ID, REST_NAME, FAVORITES FROM REST_INFO
WHERE (FOOD_TYPE, FAVORITES) IN (SELECT FOOD_TYPE, MAX(FAVORITES) 
											FROM REST_INFO
                                 GROUP BY FOOD_TYPE)
ORDER BY FOOD_TYPE DESC;
	
	
## GROUP BY: 저자 별 카테고리 별 매출액 집계하기
SELECT A.AUTHOR_ID, A.AUTHOR_NAME, B.CATEGORY, SUM(B.PRICE*BS.SALES) AS TOTAL_SALES
FROM AUTHOR A
INNER JOIN BOOK B ON B.AUTHOR_ID = A.AUTHOR_ID
INNER JOIN BOOK_SALES BS ON B.BOOK_ID = BS.BOOK_ID
WHERE YEAR(BS.SALES_DATE) = 2022 AND MONTH(BS.SALES_DATE) = 1
GROUP BY A.AUTHOR_ID, B.CATEGORY
ORDER BY A.AUTHOR_ID ASC, B.CATEGORY DESC;


## IS NULL: 경기도에 위치한 식품창고 목록 출력하기
SELECT WAREHOUSE_ID, WAREHOUSE_NAME, ADDRESS, IFNULL(FREEZER_YN,'N') AS FREEZER_YN 
FROM FOOD_WAREHOUSE 
WHERE WAREHOUSE_NAME LIKE '%경기%'
ORDER BY WAREHOUSE_ID ASC;


## IS NULL: 나이 정보가 없는 회원 수 구하기
SELECT COUNT(USER_ID) AS USERS FROM USER_INFO 
WHERE AGE IS NULL;


## IS NULL: 이름이 없는 동물의 아이디
SELECT ANIMAL_ID FROM ANIMAL_INS 
WHERE NAME IS NULL
ORDER BY ANIMAL_ID;


## IS NULL: 이름이 있는 동물의 아이디
SELECT ANIMAL_ID FROM ANIMAL_INS 
WHERE NAME IS NOT NULL
ORDER BY ANIMAL_ID;


## JOIN: 조건에 맞는 도서와 저자 리스트 출력하기
SELECT B.BOOK_ID, A.AUTHOR_NAME, DATE_FORMAT(B.PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM BOOK B
LEFT JOIN AUTHOR A ON B.AUTHOR_ID = A.AUTHOR_ID
WHERE B.CATEGORY = '경제'
ORDER BY B.PUBLISHED_DATE;


## JOIN: 상품 별 오프라인 매출 구하기
SELECT P.PRODUCT_CODE, SUM(O.SALES_AMOUNT*P.PRICE) AS SALES
FROM OFFLINE_SALE AS O
INNER JOIN PRODUCT AS P ON P.PRODUCT_ID = O.PRODUCT_ID
GROUP BY O.PRODUCT_ID
ORDER BY SALES DESC, P.PRODUCT_CODE;


## JOIN: 있었는데요 없었습니다
SELECT AI.ANIMAL_ID, AI.NAME
FROM ANIMAL_INS AI
INNER JOIN ANIMAL_OUTS AO ON AI.ANIMAL_ID = AO.ANIMAL_ID
WHERE AI.DATETIME > AO.DATETIME
ORDER BY AI.DATETIME;


## JOIN: 없어진 기록 찾기
SELECT  AO.ANIMAL_ID, AO.NAME #, AI.ANIMAL_ID
FROM ANIMAL_OUTS AO
LEFT JOIN ANIMAL_INS AI ON AI.ANIMAL_ID = AO.ANIMAL_ID
WHERE AI.ANIMAL_ID IS NULL
ORDER BY ANIMAL_ID ;


## JOIN: 오랜 기간 보호한 동물(1)
SELECT A.NAME, A.DATETIME
FROM ANIMAL_INS A
LEFT JOIN ANIMAL_OUTS B ON A.ANIMAL_ID = B.ANIMAL_ID
WHERE B.NAME IS NULL #AND A.NAME IS NOT NULL
ORDER BY A.DATETIME
LIMIT 3;
# WHERE 절 조건 다른 변수에 적용
SELECT A.NAME, A.DATETIME
FROM ANIMAL_INS A
LEFT JOIN ANIMAL_OUTS B ON A.ANIMAL_ID = B.ANIMAL_ID
WHERE B.ANIMAL_ID IS NULL 
ORDER BY A.DATETIME
LIMIT 3;


## JOIN: 보호소에서 중성화한 동물
SELECT AI.ANIMAL_ID, AI.ANIMAL_TYPE, AI.NAME
FROM ANIMAL_INS AI
JOIN ANIMAL_OUTS AO ON AI.ANIMAL_ID = AO.ANIMAL_ID
WHERE NOT AI.SEX_UPON_INTAKE IN ('Spayed Female', 'Neutered Male') 
AND AO.SEX_UPON_OUTCOME IN ('Spayed Female', 'Neutered Male')
ORDER BY AI.ANIMAL_ID;


## JOIN: 주문량이 많은 아이스크림들 조회하기
SELECT A.FLAVOR
FROM FIRST_HALF A
JOIN JULY B ON A.FLAVOR = B.FLAVOR    
GROUP BY A.FLAVOR
ORDER BY SUM(A.TOTAL_ORDER+B.TOTAL_ORDER) DESC
LIMIT 3;
# 위 코드 SUM 부분 변경
SELECT A.FLAVOR
FROM FIRST_HALF A
JOIN JULY B ON A.FLAVOR = B.FLAVOR    
GROUP BY A.FLAVOR
ORDER BY A.TOTAL_ORDER+SUM(B.TOTAL_ORDER) DESC
LIMIT 3;
# 다른 분 코드
SELECT A.FLAVOR
FROM FIRST_HALF A JOIN (SELECT FLAVOR, SUM(TOTAL_ORDER) AS TOTAL_ORDER FROM JULY GROUP BY FLAVOR) B
ON A.FLAVOR = B.FLAVOR
ORDER BY A.TOTAL_ORDER+B.TOTAL_ORDER DESC
LIMIT 3;


## String, Date: 특정 옵션이 포함된 자동차 리스트 구하기
SELECT *
FROM CAR_RENTAL_COMPANY_CAR 
WHERE OPTIONS LIKE '%네비게이션%'
ORDER BY CAR_ID DESC ;


## String, Date: 루시와 엘라 찾기
SELECT ANIMAL_ID, NAME, SEX_UPON_INTAKE
FROM ANIMAL_INS 
WHERE NAME IN ('Lucy', 'Ella', 'Pickle', 'Rogan', 'Sabrina', 'Mitty')
ORDER BY ANIMAL_ID;


## String, Date: DATETIME에서 DATE로 형 변환
SELECT ANIMAL_ID, NAME, DATE_FORMAT(DATETIME, '%Y-%m-%d') 날짜
FROM ANIMAL_INS 
ORDER BY ANIMAL_ID;


## String, Date: 이름에 el이 들어가는 동물 찾기
SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
WHERE NAME LIKE '%EL%'
AND ANIMAL_TYPE = 'Dog'
ORDER BY NAME;


## String, Date: 중성화 여부 파악하기
SELECT ANIMAL_ID, NAME,
IF(SEX_UPON_INTAKE LIKE '%Neutered%' OR SEX_UPON_INTAKE LIKE '%Spayed%','O','X') AS '중성화'
FROM ANIMAL_INS 
ORDER BY ANIMAL_ID;
# 다른 분 코드 - CASE WHEN END
SELECT ANIMAL_ID, NAME, 
CASE WHEN SEX_UPON_INTAKE LIKE '%Neutered%' OR SEX_UPON_INTAKE LIKE '%Spayed%' THEN 'O' 
ELSE 'X' END AS 중성화 
FROM ANIMAL_INS ORDER BY ANIMAL_ID;


## String, Date: 오랜 기간 보호한 동물(2)
SELECT I.ANIMAL_ID, I.NAME
FROM ANIMAL_INS I
JOIN ANIMAL_OUTS O ON I.ANIMAL_ID = O.ANIMAL_ID
ORDER BY DATEDIFF(I.DATETIME, O.DATETIME)
LIMIT 2;
# 다른 분 코드 - 날짜 빼는 방법 다르게
SELECT I.ANIMAL_ID, I.NAME
FROM ANIMAL_INS I
JOIN ANIMAL_OUTS O ON I.ANIMAL_ID = O.ANIMAL_ID
ORDER BY O.DATETIME - I.DATETIME DESC
LIMIT 2;


## String, Date: 조건별로 분류하여 주문상태 출력하기
SELECT ORDER_ID, PRODUCT_ID, DATE_FORMAT(OUT_DATE,'%Y-%m-%d') AS OUT_DATE, 
        CASE 
            WHEN OUT_DATE <= '2022-05-01' THEN '출고완료'
            WHEN OUT_DATE > '2022-05-01' THEN '출고대기'
            ELSE '출고미정'
        END AS '출고여부'
FROM FOOD_ORDER 
ORDER BY ORDER_ID ASC;


## String, Date: 대여 기록이 존재하는 자동차 리스트 구하기
SELECT DISTINCT C.CAR_ID
FROM CAR_RENTAL_COMPANY_CAR C
JOIN CAR_RENTAL_COMPANY_RENTAL_HISTORY H ON C.CAR_ID = H.CAR_ID
WHERE C.CAR_TYPE = '세단'
AND MONTH(H.START_DATE) = 10
ORDER BY C.CAR_ID DESC;


## String, Date: 취소되지 않은 진료 예약 조회하기
SELECT A.APNT_NO, P.PT_NAME, P.PT_NO, A.MCDP_CD, D.DR_NAME, A.APNT_YMD
FROM APPOINTMENT A
JOIN PATIENT P ON A.PT_NO = P.PT_NO
JOIN DOCTOR D ON A.MDDR_ID = D.DR_ID
WHERE date_format(A.APNT_YMD, '%Y-%m-%d') = '2022-04-13'
AND A.APNT_CNCL_YN = 'N'
AND A.MCDP_CD = 'CS'
ORDER BY A.APNT_YMD;
# 날짜 조건 다르게
SELECT AP.APNT_NO, P.PT_NAME, AP.PT_NO, AP.MCDP_CD, D.DR_NAME, AP.APNT_YMD
FROM APPOINTMENT AP 
JOIN DOCTOR D ON D.DR_ID = AP.MDDR_ID
JOIN PATIENT P ON P.PT_NO = AP.PT_NO
WHERE AP.APNT_CNCL_YMD IS NULL AND AP.MCDP_CD = 'CS' AND AP.APNT_YMD LIKE '2022-04-13%'
ORDER BY AP.APNT_YMD





